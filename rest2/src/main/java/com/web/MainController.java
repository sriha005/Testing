package com.web;

import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
//@Path("/demo")
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private CustomerDB userRepository;

	/*
	@PostMapping(path="/cust") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam int product_id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		 Customer c = new Customer(name,product_id);
		
		
		userRepository.save(c);
		return "Saved";
		
	}*/
	
	@PostMapping(path="/cust") // Map ONLY POST Requests
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public @ResponseBody String addNewUser (@RequestBody Customer c) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		 //Customer c = new Customer(name,product_id);
		
		System.out.println(c.getName());
		userRepository.save(c);
		return "Saved";
		
	}
	@PutMapping(path="/cust")
	@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })
	public @ResponseBody String updateUser (@RequestBody Customer c) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		System.out.println(c.getName());
		userRepository.save(c);
		return "Saved";
		
	}

	@GetMapping(path="/cust")
	@Produces(MediaType.APPLICATION_JSON)
	//@Path("/all")
	public @ResponseBody Iterable<Customer> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/ProductId")
	//@Path("/all")
	public @ResponseBody Iterable<Customer> findByProduct_Id(@RequestParam int product_id){
		// This returns a JSON or XML with the users
		return userRepository.findByproduct_id(product_id);
	}
	
	 	@DeleteMapping(path = "/cust/{id}")
	    public void delete(@PathVariable("id") int Id) {
	 		System.out.println(Id);
	        userRepository.deleteById(Id);
	    }
	 	
	 	@DeleteMapping(path = "/cust")
	    public void deleteAll() {
	 		
	        userRepository.deleteAll();
	    }
}